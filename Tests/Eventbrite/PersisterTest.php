<?php

namespace SFBCN\EventbriteBundle\Eventbrite;

use SFBCN\EventbriteBundle\Entity\Event;
use Guzzle\Service\Client;
use Guzzle\Http\Message\Request;
use Guzzle\Http\Message\Response;
use Guzzle\Common\Collection;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-01 at 00:37:43.
 */
class PersisterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Persister
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * Test case for SFBCN\EventbriteBundle\Eventbrite\Service::save
     *
     * @covers SFBCN\EventbriteBundle\Eventbrite\Service::save
     */
    public function testSave()
    {
        $query = m::mock('\Guzzle\Common\Collection');
        $query->shouldReceive('add')->with('key1', 'value1')->once();
        $query->shouldReceive('add')->with('key2', 'value2')->once();

        $response = m::mock('\Guzzle\Http\Message\Response');
        $response->shouldReceive('getBody')->with(true)->once()->andReturn('<?xml version="1.0" encoding="utf-8"?><process><id>1</id></process>');

        $request = m::mock('\Guzzle\Http\Message\Request');
        $request->shouldReceive('getQuery')->times(2)->andReturn($query);
        $request->shouldReceive('send')->once()->andReturn($response);

        $entity = m::mock('\SFBCN\EventbriteBundle\Entity\Event');
        $entity->shouldReceive('toArray')->andReturn(array('key1' => 'value1', 'key2' => 'value2'));
        $entity->shouldReceive('setId')->with(1)->once();
        $entity->shouldReceive('setIsNew')->with(false)->once();

        $client = m::mock(new Client());
        $classParts = array_slice(explode('\\', get_class($entity)), -1);
        $client->shouldReceive('get')->with('/' . strtolower($classParts[0]) . '_new')->andReturn($request);

        $this->object = new Persister($client);
        $this->assertInstanceOf('\SFBCN\EventbriteBundle\Entity\Event', $this->object->save($entity));
    }

    /**
     * Test case for SFBCN\EventbriteBundle\Eventbrite\Service::save
     *
     * @covers SFBCN\EventbriteBundle\Eventbrite\Service::update
     */
    public function testUpdate()
    {
        $query = m::mock('\Guzzle\Common\Collection');
        $query->shouldReceive('add')->with('key1', 'value1')->once();
        $query->shouldReceive('add')->with('key2', 'value2')->once();

        $response = m::mock('\Guzzle\Http\Message\Response');
        $response->shouldReceive('getBody')->with(true)->once()->andReturn('<?xml version="1.0" encoding="utf-8"?><process><id>1</id></process>');

        $request = m::mock('\Guzzle\Http\Message\Request');
        $request->shouldReceive('getQuery')->times(2)->andReturn($query);
        $request->shouldReceive('send')->once()->andReturn($response);

        $entity = m::mock('\SFBCN\EventbriteBundle\Entity\Event');
        $entity->shouldReceive('toArray')->andReturn(array('key1' => 'value1', 'key2' => 'value2'));
        $entity->shouldReceive('setId')->with(1)->once();
        $entity->shouldReceive('setIsNew')->with(false)->once();

        $client = m::mock(new Client());
        $classParts = array_slice(explode('\\', get_class($entity)), -1);
        $client->shouldReceive('get')->with('/' . strtolower($classParts[0]) . '_update')->andReturn($request);

        $this->object = new Persister($client);
        $this->assertInstanceOf('\SFBCN\EventbriteBundle\Entity\Event', $this->object->save($entity, true));
    }
}
