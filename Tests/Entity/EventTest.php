<?php

namespace SFBCN\EventbriteBundle\Tests\Entity;

use SFBCN\EventbriteBundle\Entity\Event;
use SFBCN\EventbriteBundle\Entity\Organizer;
use SFBCN\EventbriteBundle\Entity\Venue;
use SFBCN\EventbriteBundle\Entity\Ticket;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-02 at 00:54:01.
 */
class EventTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Event
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Event();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Event::getRemainingSpaces
     */
    public function testGetRemainingSpaces()
    {
        $this->object->setCapacity(1000);
        $this->object->setNumAtendee(900);

        $this->assertEquals(100, $this->object->getRemainingSpaces());
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Event::toArray
     */
    public function testToArray()
    {
        $now = new \DateTime();

        $this->object->setId(1);
        $this->object->setTitle('Test');
        $this->object->setBackgroundColor('FFFFFF');
        $this->object->setBoxBorderColor('FFFFFF');
        $this->object->setBoxBackgroundColor('FFFFFF');
        $this->object->setBoxHeaderBackgroundColor('FFFFFF');
        $this->object->setBoxHeaderTextColor('FFFFFF');
        $this->object->setBoxTextColor('FFFFFF');
        $this->object->setCapacity(1000);
        $this->object->setCurrency('EUR');
        $this->object->setDescription('Test');
        $this->object->setEndDate($now);
        $this->object->setLinkColor('FFFFFF');

        $organizer = new Organizer();
        $organizer->setId(1);
        $this->object->setOrganizer($organizer);

        $this->object->setPersonalizedUrl('test');
        $this->object->setPrivacy(Event::PRIVACY_PUBLIC);
        $this->object->setStartDate($now);
        $this->object->setStatus(Event::STATUS_LIVE);
        $this->object->setTextColor('FFFFFF');
        $this->object->setTimezone(new \DateTimeZone('Europe/Madrid'));
        $this->object->setTitleTextColor('FFFFFF');

        $venue = new Venue();
        $venue->setId(1);
        $this->object->setVenue($venue);

        $expected = array(
            'title'                         => 'Test',
            'background_color'              => 'FFFFFF',
            'box_background_color'          => 'FFFFFF',
            'box_header_background_color'   => 'FFFFFF',
            'box_border_color'              => 'FFFFFF',
            'box_header_text_color'         => 'FFFFFF',
            'box_text_color'                => 'FFFFFF',
            'capacity'                      => 1000,
            'currency'                      => 'EUR',
            'description'                   => 'Test',
            'end_date'                      => $now->format('Y-m-d H:i:s'),
            'link_color'                    => 'FFFFFF',
            'organizer_id'                  => 1,
            'personalized_url'              => 'test',
            'privacy'                       => 1,
            'start_date'                    => $now->format('Y-m-d H:i:s'),
            'status'                        => 'Live',
            'text_color'                    => 'FFFFFF',
            'timezone'                      => 'Europe/Madrid',
            'title_text_color'              => 'FFFFFF',
            'venue_id'                      => 1,
            'id'                            => 1
        );

        $this->assertEquals($expected, $this->object->toArray());
    }
}
