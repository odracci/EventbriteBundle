<?php

namespace SFBCN\EventbriteBundle\Tests\Entity\Mapper;

use SFBCN\EventbriteBundle\Entity\Mapper\Venue;
use SFBCN\EventbriteBundle\Eventbrite\Mapper;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-06 at 11:59:48.
 */
class VenueTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Venue
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Venue(new Mapper());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Mapper\Venue::map
     */
    public function testMap()
    {
        $entity = simplexml_load_string(<<<EOX
<?xml version="1.0" encoding="utf-8"?>
<venue>
    <Lat-Long>41.292571 / -73.679426</Lat-Long>
    <address>Old Bedford Rd</address>
    <address_2></address_2>
    <city>Goldens Bridge</city>
    <country>United States</country>
    <country_code>US</country_code>
    <id>1932369</id>
    <latitude>41.292571</latitude>
    <longitude>-73.679426</longitude>
    <name>Test</name>
    <postal_code>10526</postal_code>
    <region>NY</region>
</venue>
EOX
        );

        $result = $this->object->map($entity);

        $this->assertInstanceOf('\SFBCN\EventbriteBundle\Entity\Venue', $result);
        $this->assertEquals('Old Bedford Rd', $result->getAddress());
        $this->assertEmpty($result->getAddress2());
        $this->assertEquals('Goldens Bridge', $result->getCity());
        $this->assertEquals('United States', $result->getCountry());
        $this->assertEquals('US', $result->getCountryCode());
        $this->assertEquals('1932369', $result->getId());
        $this->assertEquals(41.292571, $result->getLatitude());
        $this->assertEquals(-73.679426, $result->getLongitude());
        $this->assertEquals('41.292571 / -73.679426', $result->getLatLong());
        $this->assertEquals('Test', $result->getName());
        $this->assertEquals('10526', $result->getPostalCode());
        $this->assertEquals('NY', $result->getRegion());
    }
}
