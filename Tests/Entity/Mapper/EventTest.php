<?php

namespace SFBCN\EventbriteBundle\Tests\Entity\Mapper;

use SFBCN\EventbriteBundle\Entity\Mapper\Event;
use SFBCN\EventbriteBundle\Entity\Organizer;
use SFBCN\EventbriteBundle\Eventbrite\Mapper;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-05 at 00:41:33.
 */
class EventTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \SFBCN\EventbriteBundle\Entity\Mapper\Event
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Mapper\Event::map
     */
    public function testMap()
    {
        $entity = simplexml_load_string(<<<EOX
<?xml version="1.0" encoding="utf-8"?>
<event>
    <id>1</id>
    <start_date>2012-05-05 00:00:00</start_date>
    <end_date>2012-05-05 00:00:00</end_date>
    <created>2012-05-05 00:00:00</created>
    <updated>2012-05-05 00:00:00</updated>
    <timezone>Europe/Madrid</timezone>
    <organizer>#organizerxml#</organizer>
</event>
EOX
        );

        $organizer = new Organizer();

        $mapper = m::mock('\SFBCN\EventbriteBundle\Eventbrite\Mapper');
        $mapper->shouldReceive('map')->once()->andReturn($organizer);

        $this->object = new Event($mapper);
        $result = $this->object->map($entity);

        $this->assertInstanceOf('\SFBCN\EventbriteBundle\Entity\Event', $result);
        $this->assertEquals(1, $result->getId());
    }
}
