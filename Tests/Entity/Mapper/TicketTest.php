<?php

namespace SFBCN\EventbriteBundle\Tests\Entity\Mapper;

use SFBCN\EventbriteBundle\Entity\Mapper\Ticket;
use SFBCN\EventbriteBundle\Eventbrite\Mapper;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-05 at 20:38:00.
 */
class TicketTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Ticket
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Ticket(new Mapper());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Mapper\Organizer::map
     */
    public function testMap()
    {
        $entity = simplexml_load_string(<<<EOX
<?xml version="1.0" encoding="utf-8"?>
<ticket>
    <currency>USD</currency>
    <description>Test</description>
    <end_date>2012-04-06 12:00:00</end_date>
    <id>13780767</id>
    <max>None</max>
    <min>1</min>
    <name>Free</name>
    <price>0.00</price>
    <quantity_available>100</quantity_available>
    <quantity_sold>0</quantity_sold>
    <type>0</type>
    <visible>false</visible>
</ticket>
EOX
        );

        $result = $this->object->map($entity);

        $this->assertInstanceOf('\SFBCN\EventbriteBundle\Entity\Ticket', $result);
        $this->assertEquals('USD', $result->getCurrency());
        $this->assertEquals('Test', $result->getDescription());
        $this->assertEquals('2012-04-06 12:00:00', $result->getEndDate()->format('Y-m-d H:i:s'));
        $this->assertEquals('13780767', $result->getId());
        $this->assertEquals(0, $result->getMax());
        $this->assertEquals(1, $result->getMin());
        $this->assertEquals('Free', $result->getName());
        $this->assertEquals(0, $result->getPrice());
        $this->assertEquals(100, $result->getQuantityAvailable());
        $this->assertEquals(0, $result->getQuantitySold());
        $this->assertEquals(0, $result->getType());
        $this->assertFalse($result->getVisible());
    }
}
