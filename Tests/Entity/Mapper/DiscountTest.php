<?php

namespace SFBCN\EventbriteBundle\Tests\Entity\Mapper;

use SFBCN\EventbriteBundle\Entity\Mapper\Discount;
use SFBCN\EventbriteBundle\Eventbrite\Mapper;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-06 at 11:59:48.
 */
class DiscountTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Discount
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Discount(new Mapper());
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Mapper\Discount::map
     */
    public function testMap()
    {
        $entity = simplexml_load_string(<<<EOX
<?xml version="1.0" encoding="utf-8"?>
<discount>
    <code>test@gmail.com</code>
    <discount_id>4748093</discount_id>
    <percent_off>5.00</percent_off>
    <quantity_available>1</quantity_available>
    <quantity_sold>0</quantity_sold>
    <tickets>all</tickets>
</discount>
EOX
        );

        $result = $this->object->map($entity);

        $this->assertInstanceOf('\SFBCN\EventbriteBundle\Entity\Discount', $result);
        $this->assertEquals('test@gmail.com', $result->getCode());
        $this->assertEquals(5, $result->getPercentOff());
        $this->assertEquals(1, $result->getQuantityAvailable());
        $this->assertEquals('4748093', $result->getId());
        $this->assertEquals(0, $result->getQuantitySold());
        $this->assertEquals('all', $result->getTickets());
    }
}
