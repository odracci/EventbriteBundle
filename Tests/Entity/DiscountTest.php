<?php

namespace SFBCN\EventbriteBundle\Tests\Entity;

use SFBCN\EventbriteBundle\Entity\Discount;
use SFBCN\EventbriteBundle\Entity\Event;
use SFBCN\EventbriteBundle\Entity\Ticket;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-09 at 07:23:15.
 */
class DiscountTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Discount
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Discount;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Discount::addTicket
     */
    public function testAddNonExistentTicket()
    {
        $ticket = new Ticket();
        $ticket->setId(5);
        $this->object->addTicket($ticket);

        $this->assertEquals('5', $this->object->getTickets());
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Discount::addTicket
     */
    public function testAddExistentTicket()
    {
        $ticket1 = new Ticket();
        $ticket1->setId(5);
        $this->object->addTicket($ticket1);

        $ticket2 = new Ticket();
        $ticket2->setId(6);
        $this->object->addTicket($ticket2);

        $ticket3 = new Ticket();
        $ticket3->setId(5);
        $this->object->addTicket($ticket3);

        $this->assertEquals('5,6', $this->object->getTickets());
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\Discount::toArray
     * @expectedException \BadMethodCallException
     */
    public function testToArrayThrowsExceptionOnNoEventSpecified()
    {
        $this->object->toArray();
    }

    /**
     * Date provider for testToArray
     *
     * @return array
     */
    public function toArrayDataProvider()
    {
        return array(
            array(),
            array(true)
        );
    }

    /**
     * @param bool $forUpdate
     *
     * @covers SFBCN\EventbriteBundle\Entity\Discount::toArray
     * @dataProvider toArrayDataProvider
     */
    public function testToArray($forUpdate = false)
    {
        $now = new \DateTime();

        $this->object->setAmountOff(15.4);
        $this->object->setCode('Test');
        $this->object->setEndDate($now);
        $this->object->setPercentOff(15.4);
        $this->object->setQuantityAvailable(100);
        $this->object->setQuantitySold(100);
        $this->object->setStartDate($now);
        $this->object->setTickets('1,2,3,4');

        if (false === $forUpdate) {
            $event = new Event();
            $event->setId(1);
            $this->object->setEvent($event);
        } else {
            $this->object->setId(1);
        }

        $result = $this->object->toArray();

        $this->assertInternalType('array', $result);
        $this->assertArrayHasKey('amount_off', $result);
        $this->assertEquals(15.4, $result['amount_off']);
        $this->assertArrayHasKey('code', $result);
        $this->assertEquals('Test', $result['code']);
        $this->assertArrayHasKey('end_date', $result);
        $this->assertEquals($now->format('Y-m-d H:i:s'), $result['end_date']);
        $this->assertArrayHasKey('start_date', $result);
        $this->assertEquals($now->format('Y-m-d H:i:s'), $result['start_date']);
        $this->assertArrayHasKey('percent_off', $result);
        $this->assertEquals(15.4, $result['percent_off']);
        $this->assertArrayHasKey('quantity_available', $result);
        $this->assertEquals(100, $result['quantity_available']);
        $this->assertArrayHasKey('quantity_sold', $result);
        $this->assertEquals(100, $result['quantity_sold']);
        $this->assertArrayHasKey('tickets', $result);
        $this->assertEquals('1,2,3,4', $result['tickets']);

        if (false === $forUpdate) {
            $this->assertArrayHasKey('event_id', $result);
            $this->assertEquals(1, $result['event_id']);
        } else {
            $this->assertArrayHasKey('discount_id', $result);
            $this->assertEquals(1, $result['discount_id']);
        }
    }
}
