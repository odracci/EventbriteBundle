<?php

namespace SFBCN\EventbriteBundle\Tests\Entity;

use SFBCN\EventbriteBundle\Entity\VenueRepository;
use SFBCN\EventbriteBundle\Entity\Venue;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-05 at 00:32:30.
 */
class VenueRepositoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var VenueRepository
     */
    protected $object;

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @covers SFBCN\EventbriteBundle\Entity\OrganizerRepository::findOrganizer
     */
    public function testFindOrganizer()
    {
        $command = m::mock('\Guzzle\Service\Command\AbstractCommand');

        $response = simplexml_load_string(<<<EOX
<?xml version="1.0" encoding="UTF-8" ?>
<venue>
    <Lat-Long>41.292571 / -73.679426</Lat-Long>
    <address>Old Bedford Rd</address>
    <address_2></address_2>
    <city>Goldens Bridge</city>
    <country>United States</country>
    <country_code>US</country_code>
    <id>1932369</id>
    <latitude>41.292571</latitude>
    <longitude>-73.679426</longitude>
    <name>Test</name>
    <postal_code>10526</postal_code>
    <region>NY</region>
</venue>
EOX
        );

        $mapper = m::mock('\SFBCN\EventbriteBundle\Eventbrite\Mapper');
        $mapper->shouldReceive('map')->with($response)->once()->andReturn('#venue#');

        $client = m::mock('stdClass');
        $client->shouldReceive('getCommand')->with('venue_get', array('id' => 1))->once()->andReturn($command);
        $client->shouldReceive('execute')->with($command)->once()->andReturn($response);

        $this->object = new VenueRepository($client, $mapper);
        $result = $this->object->findVenue(1);

        $this->assertEquals('#venue#', $result);
    }
}
