<?php

namespace SFBCN\EventbriteBundle\Tests\Form;

use SFBCN\EventbriteBundle\Form\EventType;
use Symfony\Component\Form\FormBuilder;
use Mockery as m;

/**
 * Test class for EventType.
 *
 * Generated by PHPUnit on 2012-05-14 at 23:28:26.
 */
class EventTypeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var EventType
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new EventType;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\EventType::buildForm
     */
    public function testBuildForm()
    {
        $formBuilder = m::mock('\Symfony\Component\Form\FormBuilder');
        $formBuilder->shouldReceive('add')->with('title', 'text')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('description', 'textarea')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('start_date', 'datetime')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('end_date', 'datetime')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('timezone', 'timezone')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('privacy', 'choice', array('choices' => array('0' => 'Private', '1' => 'Public')))->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('personalized_url', 'text')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('venue', 'venue')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('organizer', 'organizer')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('capacity', 'integer')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('currency', 'text')->once()->ordered()->andReturn($formBuilder);
        $formBuilder->shouldReceive('add')->with('status', 'text')->once()->ordered()->andReturn($formBuilder);

        $this->assertNull($this->object->buildForm($formBuilder, array()));
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\EventType::getName
     */
    public function testGetName()
    {
        $this->assertEquals('sfbcn_eventbritebundle_eventtype', $this->object->getName());
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\EventType::getDefaultOptions
     */
    public function testGetDefaultOptions()
    {
        $expected = array(
            'data_class'        => 'SFBCN\EventbriteBundle\Entity\Event',
            'csrf_protection'   => true,
            'intention'         => 'sfbcn_eventbrite_event'
        );

        $this->assertEquals($expected, $this->object->getDefaultOptions(array()));
    }
}