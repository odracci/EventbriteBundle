<?php
namespace SFBCN\EventbriteBundle\Tests\Form\DataTransformer;

use Symfony\Component\Form\Exception\UnexpectedTypeException;

use SFBCN\EventbriteBundle\Form\DataTransformer\VenueToIdTransformer;
use SFBCN\EventbriteBundle\Entity\VenueRepository;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-17 at 08:44:10.
 */
class VenueToIdTransformerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var VenueToIdTransformer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @expectedException \Symfony\Component\Form\Exception\UnexpectedTypeException
     */
    public function testTransformShouldThrowExceptionOnUnexpectedTypePassed()
    {
        $venueRepository = m::mock('\SFBCN\EventbriteBundle\Entity\VenueRepository');
        $this->object = new VenueToIdTransformer($venueRepository);

        $this->object->transform('test');
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\DataTransformer\VenueToIdTransformer::transform
     */
    public function testTransform()
    {
        $venueRepository = m::mock('\SFBCN\EventbriteBundle\Entity\VenueRepository');
        $this->object = new VenueToIdTransformer($venueRepository);

        $venue = m::mock('\SFBCN\EventbriteBundle\Entity\Venue');
        $venue->shouldReceive('getId')->withNoArgs()->once()->andReturn(1);

        $this->assertEquals(1, $this->object->transform($venue));
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\DataTransformer\VenueToIdTransformer::reverseTransform
     * @expectedException \Symfony\Component\Form\Exception\UnexpectedTypeException
     */
    public function testReverseTransformThrowsExceptionOnUnexpectedValuePassed()
    {
        $venueRepository = m::mock('\SFBCN\EventbriteBundle\Entity\VenueRepository');
        $this->object = new VenueToIdTransformer($venueRepository);

        $this->object->reverseTransform(array());
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\DataTransformer\VenueToIdTransformer::reverseTransform
     */
    public function testReverseTransform()
    {
        $venueRepository = m::mock('\SFBCN\EventbriteBundle\Entity\VenueRepository');
        $venueRepository->shouldReceive('findVenue')->with('1')->once()->andReturn('#venue#');

        $this->object = new VenueToIdTransformer($venueRepository);

        $this->assertEquals('#venue#', $this->object->reverseTransform('1'));
    }
}
