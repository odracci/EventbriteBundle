<?php
namespace SFBCN\EventbriteBundle\Tests\Form\Type;

use SFBCN\EventbriteBundle\Form\Type\OrganizerType;
use Mockery as m;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-05-17 at 07:29:19.
 */
class OrganizerTypeTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \SFBCN\EventbriteBundle\Form\ChoiceList\OrganizerChoiceList
     */
    protected $organizerChoiceList;

    /**
     * @var \SFBCN\EventbriteBundle\Form\DataTransformer\OrganizerToIdTransformer
     */
    protected $organizerToIdTransformer;

    /**
     * @var OrganizerType
     */
    protected $object;

    /**
     * Set up the fixture
     */
    protected function setUp()
    {
        $this->organizerChoiceList = m::mock('\SFBCN\EventbriteBundle\Form\ChoiceList\OrganizerChoiceList');
        $this->organizerToIdTransformer = m::mock('SFBCN\EventbriteBundle\Form\DataTransformer\OrganizerToIdTransformer');

        $this->object = new OrganizerType($this->organizerChoiceList, $this->organizerToIdTransformer);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\Type\OrganizerType::buildForm
     */
    public function testBuildForm()
    {
        $formBuilder = m::mock('Symfony\Component\Form\FormBuilder');
        $formBuilder->shouldReceive('add')->with('organizer', 'choice', array('choice_list' => $this->organizerChoiceList))->andReturn($formBuilder);
        $formBuilder->shouldReceive('appendClientTransformer')->with($this->organizerToIdTransformer)->once();

        $this->assertNull($this->object->buildForm($formBuilder, array()));
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\Type\OrganizerType::buildView
     */
    public function testBuildView()
    {
        $view = m::mock('\Symfony\Component\Form\FormView');
        $view->shouldReceive('set')->with('widget', '#form-attributes#');

        $form = m::mock('\Symfony\Component\Form\Form');
        $form->shouldReceive('getAttribute')->with('widget')->once()->andReturn('#form-attributes#');

        $this->assertNull($this->object->buildView($view, $form));
    }

    /**
     * @covers SFBCN\EventbriteBundle\Form\Type\OrganizerType::getName
     */
    public function testGetName()
    {
        $this->assertEquals('organizer', $this->object->getName());
    }
}
